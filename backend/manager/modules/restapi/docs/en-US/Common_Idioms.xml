<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "REST_API_Guide.ent">
%BOOK_ENTITIES;
]>
<chapter id="chap-REST_API_Guide-Common_Features">
  <title>Common Features</title>
  <para>
    This chapter examines features common to resources and collections. 
  </para>

  <note>
    <title>Element property icons</title>
    <para>
      Throughout this guide, the elements of each resource are detailed in tables. These tables include a properties column, displaying icons depicting element properties. The meaning of these icons is shown in <xref linkend="table-Property_Icons" />
    </para>
  </note>
  <table frame="none" id="table-Property_Icons">
    <title>Element property icons</title>
    <tgroup cols="3">
      <colspec colwidth="2*"/>
      <colspec colwidth="4*"/>
      <colspec colwidth="1*"/>
      <thead>
        <row>
          <entry>Property</entry>
          <entry>Description</entry>
          <entry>Icon</entry>
        </row>
      </thead>
      <tbody>
        <row>
          <entry>Required for creation</entry>
          <entry>These elements must be included in the client-provided representation of a resource on creation, but are not mandatory for an update of a resource.</entry>
          <entry><inlinemediaobject><imageobject><imagedata fileref="images/required.png" format="PNG" /></imageobject></inlinemediaobject></entry>
        </row>
        <row>
          <entry>Non-updateable</entry>
          <entry>These elements cannot have their value changed when updating a resource. They are only included in a client-provided representation on update if their values are not altered. Otherwise they are omitted from an update action.</entry>
          <entry><inlinemediaobject><imageobject><imagedata fileref="images/locked.png" format="PNG" /></imageobject></inlinemediaobject></entry>
        </row>
        <row>
          <entry>Read-only</entry>
          <entry>These elements are read-only. Values for read-only elements are not created or modified.</entry>
          <entry><inlinemediaobject><imageobject><imagedata fileref="images/readonly.png" format="PNG" /></imageobject></inlinemediaobject></entry>
        </row>
      </tbody>
    </tgroup>
  </table>
  
  <section id="sect-REST_API_Guide-Common_Features-Representations">
    <title>Representations</title>
    <para>
      The API structures resource representations in the following XML document structure:
    </para>
    <para>
      <screen>
&lt;resource id="resource_id" href="/restapi-definition/collection/resource_id"&gt;
    &lt;name&gt;Resource-Name&lt;/name&gt;
    &lt;description&gt;A description of the resource&lt;/description&gt;
    ...
&lt;/resource&gt;
      </screen>
      In the context of a virtual machine, the representation appears as follows:
      <screen>
&lt;vm id="5b9bbce5-0d72-4f56-b931-5d449181ee06"
  href="/restapi-definition/vms/5b9bbce5-0d72-4f56-b931-5d449181ee06"&gt;
    &lt;name&gt;RHEL6-Machine&lt;/name&gt;
    &lt;description&gt;Red Hat Enterprize Linux 6 Virtual Machine&lt;/description&gt;
    ...
&lt;/vm&gt;
      </screen>
    </para>  
    <para>
      The following attributes are common to all resource representations:
    </para>
    <para>
      <informaltable frame="none">
        <tgroup cols="4">
          <colspec colwidth="3*"/>
          <colspec colwidth="3*"/>
          <colspec colwidth="6*"/>
          <colspec colwidth="3*" colname="prop"/>
          <thead>
            <row>
              <entry>Attribute</entry>
              <entry>Type</entry>
              <entry>Description</entry>
              <entry>Properties</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><literal>id</literal></entry>
              <entry>GUID</entry>
              <entry>Each resource in the virtualization infrastructure contains an <literal>id</literal>, which acts as a globally unique identifier (GUID). The GUID is the primary method of resource identifcation.</entry>
              <entry><inlinemediaobject><imageobject><imagedata fileref="images/required.png" format="PNG" /></imageobject></inlinemediaobject></entry>
            </row>
            <row>
              <entry><literal>href</literal></entry>
              <entry>string</entry>
              <entry>The canonical location of the resource as an absolute path</entry>
              <entry><inlinemediaobject><imageobject><imagedata fileref="images/required.png" format="PNG" /></imageobject></inlinemediaobject></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </para>
    <para>
      The following elements are common to all resource representations:
    </para>
    <para>
      <informaltable frame="none">
        <tgroup cols="4">
          <colspec colwidth="3*"/>
          <colspec colwidth="3*"/>
          <colspec colwidth="6*"/>
          <colspec colwidth="3*" colname="prop"/>
          <thead>
            <row>
              <entry>Element</entry>
              <entry>Type</entry>
              <entry>Description</entry>
              <entry>Properties</entry>
            </row>
          </thead>
          <tbody>
          <row>
            <entry><literal>name</literal></entry>
            <entry>string</entry>
            <entry>	A user-supplied human readable name for the resource. The <literal>name</literal> is unique across all resources of its type.</entry>
            <entry><inlinemediaobject><imageobject><imagedata fileref="images/required.png" format="PNG" /></imageobject></inlinemediaobject></entry>
          </row>
          <row>
            <entry><literal>description</literal></entry>
            <entry>string</entry>
            <entry>A free-form user-supplied human readable description of the resource</entry>
            <entry></entry>
          </row>
          </tbody>
        </tgroup>
      </informaltable>
    </para>
  </section>
  <section id="sect-REST_API_Guide-Common_Features-Collections">
    <title>
      Collections
    </title>
    <para>
      This section examines common features for collections.
    </para> 
   
    <section id="sect-REST_API_Guide-Common_Features-Collections-Listing_Resources">
      <title>
        Listing All Resources in a Collection
      </title>
      <para>
        A listing of the resources in a collection is obtained by issuing a <literal>GET</literal> request on the collection URI obtained from the entry point.
      </para>
      <screen>
GET /restapi-definition/collection HTTP/1.1
Accept: application/xml

HTTP/1.1 200 OK
Content-Type: application/xml

&lt;collection&gt;
    &lt;resource id="resource_id" href="/restapi-definition/collection/resource_id"&gt;
        &lt;name&gt;Resource-Name&lt;/name&gt;
        &lt;description&gt;A description of the resource&lt;/description&gt;
        ...
    &lt;/resource&gt;
    ...
&lt;/collection&gt;
      </screen>
    </section>

    <section id="sect-REST_API_Guide-Common_Features-Collections-Listing_Resource_Subcollections">
      <title>
        Listing Extended Resource Sub-Collections
      </title>
      <para>
        The API extends collection representations to include sub-collections when the <literal>Accept</literal> header includes the <literal>detail</literal> parameter.
      </para>
      <screen>
GET /restapi-definition/collection HTTP/1.1
Accept: application/xml; detail=subcollection
      </screen>
      <para>
        This includes multiple sub-collection requests using either seperated <literal>detail</literal> parameters:
      </para>
      <screen>
GET /restapi-definition/collection HTTP/1.1
Accept: application/xml; detail=subcollection1; detail=subcollection2
      </screen>
      <para>
        Or one <literal>detail</literal> parameter that seperates the sub-collection with the <literal>+</literal> operator:
      </para>
      <screen>
GET /restapi-definition/collection HTTP/1.1
Accept: application/xml; detail=subcollection1+subcollection2+subcollection3
      </screen>
      <para>
        The API supports the following extended sub-collections:
      </para>
      <informaltable frame="none">
        <tgroup cols="2">
          <colspec colwidth="2*"/>
          <colspec colwidth="5*"/>
          <thead>
            <row>
              <entry>Collection</entry>
              <entry>Extended Sub-Collection Support</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><literal>hosts</literal></entry>
              <entry><literal>statistics</literal></entry>
            </row>
            <row>
              <entry><literal>vms</literal></entry>
              <entry><literal>statistics</literal>, <literal>nics</literal>, <literal>disks</literal></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <example>
        <title>An request for extended statistics, nics and disks sub-collections in the vms collection</title>
        <screen>
GET /restapi-definition/vms HTTP/1.1
Accept: application/xml; detail=statistics+nics+disks
        </screen>
      </example>
    </section>
    
    <section id="sect-REST_API_Guide-Common_Features-Collections-Querying_Collections">
      <title>
        Searching Collections with Queries
      </title>
      <para>
        A <literal>GET</literal> request on a <literal>"collection/search"</literal> link results in a search query of that collection. The API only returns resources within the collection that satisfy the search query constraints.
      </para>
      <screen>
GET /restapi-definition/collection?search={query} HTTP/1.1
Accept: application/xml

HTTP/1.1 200 OK
Content-Type: application/xml

&lt;collection&gt;
    &lt;resource id="resource_id" href="/restapi-definition/collection/resource_id"&gt;
        ...
    &lt;/resource&gt;
    ...
&lt;/collection&gt;
      </screen>
   
    	<section id="sect-REST_API_Guide-Common_Features-Collections-Querying_Collections-Syntax">
  		  <title>Query Syntax</title>
  	   	<para>The API uses the URI templates to perform a search <literal>query</literal> with a <literal>GET</literal> request:</para>
  	   	<screen>
GET /restapi-definition/collection?search={query} HTTP/1.1
Accept: application/xml
        </screen>
  		  <para>
  		    The <literal>query</literal> template value refers to the search query the API directs to the <literal>collection</literal>. This query uses the same <emphasis role="bold">criteria</emphasis> in Red Hat Enterprise Virtualization Manager search query language. For example:
  		  </para>
	  		<informaltable id="search_query_eg" frame='all'>
			    <tgroup cols='3'>
				    <thead>
					    <row>
 						    <entry>Collection</entry>
						    <entry>Criteria</entry>
						    <entry>Result</entry>
					    </row>
				    </thead>

				    <tbody>
					    <row>
 						    <entry><literal>hosts</literal></entry>
						    <entry>vms.status=up</entry>
						    <entry>Displays a list of all hosts running virtual machines that are up</entry>
					    </row>
					    <row>
						    <entry><literal>vms</literal></entry>
						    <entry>domain=qa.company.com</entry>
						    <entry>Displays a list of all virtual machines running on the specified domain</entry>
					    </row>
					    <row>
						    <entry><literal>vms</literal></entry>					    
						    <entry>users.name=mary</entry>
						    <entry>Displays a list of all virtual machines belonging to users with the username Mary</entry>
					    </row>
					    <row>
 						    <entry><literal>events</literal></entry>
						    <entry>severity&gt;NORMAL</entry>
						    <entry>Displays the list of all Events whose severity is higher than NORMAL</entry>
					    </row>
				    </tbody>
			    </tgroup>
    		</informaltable>
  		  <para>
  		    The API requires the <literal>query</literal> template to be URL-encoded to translate reserved characters, such as operators and spaces.
  		  </para>
        <example>
          <title>URL-encoded search query</title>
    	   	<screen>
GET /restapi-definition/vms?search=name%3Dvm1 HTTP/1.1
Accept: application/xml
          </screen>
        </example>
      </section>

      <section id="sect-REST_API_Guide-Common_Features-Collections-Querying_Collections-Wildcard_Searches">
  		  <title>Wildcards</title>
  		  <para>
  		    Search queries substitute part of a value with an asterisk as a wildcard.
  		  </para>
  		  <example>
  		    <title>Wildcard search query for name=vm*</title>
          <screen>
GET /restapi-definition/vms?search=name%3Dvm* HTTP/1.1
Accept: application/xml
Content-Type: application/xml
          </screen>
  	  	  <para>
	    	    This query would result in all virtual machines with names beginning with <literal>vm</literal>, such as <literal>vm1</literal>, <literal>vm2</literal>, <literal>vma</literal> or <literal>vm-webserver</literal>.
	    	  </para>
	    	</example>
  		  <example>
  		    <title>Wildcard search query for name=v*1</title>
          <screen>
GET /restapi-definition/vms?search=name%3Dv*1 HTTP/1.1
Accept: application/xml
Content-Type: application/xml
          </screen>
          <para>
            This query would result in all virtual machines with names beginning with <literal>v</literal> and ending with <literal>1</literal>, such as <literal>vm1</literal>, <literal>vr1</literal> or <literal>virtualmachine1</literal>.
          </para>
        </example>
  	  </section>
    </section>
    <section id="sect-REST_API_Guide-Common_Features-Resources-Creating_Resources">
      <title>
        Creating a Resource in a Collection
      </title>
      <para>
        The API creates a new resource with a <literal>POST</literal> request to the collection URI containing a representation of the new resource.
      </para>
      <para>
        Each resource type has its own specific required properties. The client supplies these properties when creating a new resource. Refer to the indiviual resource type documentation for more details. If a required property is absent, the creation fails with a <literal>fault</literal> representation indicating the missing elements.
      </para>
      <screen>
POST /restapi-definition/collection HTTP/1.1
Accept: application/xml
Content-Type: application/xml

&lt;resource&gt;
    &lt;name&gt;Resource-Name&lt;/name&gt;
&lt;/resource&gt;

HTTP/1.1 201 Created
Content-Type: application/xml

&lt;resource id="resource_id" href="/restapi-definition/collection/resource_id"&gt;
    &lt;name&gt;Resource-Name&lt;/name&gt;
    ...
&lt;/resource&gt;
      </screen>
      <para>
        The <literal>Location</literal> header in the response gives the URI of the queried resource. The response body contains either a complete representation, partial representation or no representation of the resource. It is recommended that clients rely only on fetching the representation via the URI in the response header.
      </para>
        <section id="sect-REST_API_Guide-Common_Features-Resources-Creating_Asynchronous_Resources">
        <title>
          Asynchronous Requests
        </title>
        <para>
          The API performs asynchronous <literal>POST</literal> requests unless the user overrides them with a <literal>Expect: 201-created</literal> header.
        </para>
        <para>
          For example, certain resources, such as Virtual Machines, Disks, Snapshots and Templates, are created asynchronously. A request to create an asynchronous resources results in a <literal>202 Accepted</literal> status. The initial document structure for a <literal>202 Accepted</literal> resource also contains a <literal>creation_status</literal> element and link for creation status updates. For example:
        </para>
        <screen>
POST /restapi-definition/collection HTTP/1.1
Accept: application/xml
Content-Type: application/xml

&lt;resource&gt;
    &lt;name&gt;Resource-Name&lt;/name&gt;
&lt;/resource&gt;

HTTP/1.1 202 Accepted
Content-Type: application/xml

&lt;resource id="resource_id" href="/restapi-definition/collection/resource_id"&gt;
    &lt;name&gt;Resource-Name&lt;/name&gt;
    &lt;creation_status&gt;PENDING&lt;/creation status&gt;
    &lt;link rel="creation_status" 
      href="/restapi-definition/collection/resource_id/creation_status/creation_status_id"/&gt;
      ...
&lt;/resource&gt;
        </screen>
        <para>
          A <literal>GET</literal> request to the <literal>creation_status</literal> link provides a creation status update:
        </para>
        <screen>
GET /restapi-definition/collection/resource_id/creation_status/creation_status_id HTTP/1.1
Accept: application/xml

HTTP/1.1 200 OK
Content-Type: application/xml

&lt;creation id="creation_status_id"
  href="/restapi-definition/collection/resource_id/creation_status/creation_status_id"&gt;
    &lt;status&gt;COMPLETE&lt;/status&gt;
&lt;/creation&gt;
        </screen>
        <para>
          Overriding the asynchronous resource creation requires an <literal>Expect: 201-created</literal> header:
        </para>
        <screen>
POST /restapi-definition/collection HTTP/1.1
Accept: application/xml
Content-Type: application/xml
Expect: 201-created

&lt;resource&gt;
    &lt;name&gt;Resource-Name&lt;/name&gt;
&lt;/resource&gt;
        </screen>
      </section>
    </section>    
  </section>

  <section id="sect-REST_API_Guide-Common_Features-Resources">
    <title>
      Resources
    </title>
    <para>
      This section examines common features for resources.
    </para> 

    <section id="sect-REST_API_Guide-Common_Features-Resources-Retrieving_Resources">
      <title>
        Retrieving a Resource
      </title>
      <para>
        The API retrieves the state of a resource with a <literal>GET</literal> request on a URI obtained from a collection listing.
      </para>
      <screen>
GET /restapi-definition/collection/resource_id HTTP/1.1
Accept: application/xml

HTTP/1.1 200 OK
Content-Type: application/xml

&lt;resource id="resource_id" href="/restapi-definition/collection/resource_id"&gt;
    ...
&lt;/resource&gt;
      </screen>
    </section>

    <section id="sect-REST_API_Guide-Common_Features-Resources-Updating_Resources">
      <title>
        Updating a Resource
      </title>
      <para>
        The API modifies resource properties with a <literal>PUT</literal> request containing an updated description from a previous <literal>GET</literal> request for the resource URI. Details on modifiable properties are found in the individual resource type documentation.
      </para>
      <screen>
PUT /restapi-definition/collection/resource_id HTTP/1.1
Accept: application/xml
Content-Type: application/xml

&lt;resource&gt;
    &lt;name&gt;New-Resource-Name&lt;/name&gt;
&lt;/resource&gt;

HTTP/1.1 200 OK
Content-Type: application/xml

&lt;resource id="resource_id" href="/restapi-definition/collection/resource_id"&gt;
    &lt;name&gt;New-Resource-Name&lt;/name&gt;
    ...
&lt;/resource&gt;
      </screen>
      <para>
        This does not include modified immutable resource properties, which stay unchanged. If an attempt is made to modify a <emphasis>strictly</emphasis> immutable resource property, the API reports a <literal>409 Conflict</literal> error with a <literal>fault</literal> representation in the response body.
      </para>
      <para>
        Properties omitted from the representation are ignored and not changed.
      </para>      
    </section>

    <section id="sect-REST_API_Guide-Common_Features-Resources-Deleting_Resources">
      <title>
        Deleting a Resource
      </title>
      <para>
        The API deletes a resource with a <literal>DELETE</literal> request sent to its URI.
      </para>
      <screen>
DELETE /restapi-definition/collection/resource_id HTTP/1.1
Accept: application/xml

HTTP/1.1 204 No Content
      </screen>
    </section>
  
    <section id="sect-REST_API_Guide-Common_Features-Resources-Subcollections">
      <title>
        Sub-Collection Relationships
      </title>
      <para>
        A sub-collection relationship defines a hierarchical link between a resource and a sub-collection. The sub-collection exists or has some meaning in the context of a parent resource. For example, a virtual machine contains network interfaces, which means the API maps the relationship between the virtual machine resource and the network interfaces sub-collection.
      </para>
      <para>Sub-collections are used to model the following relationships types:</para>
   	  <itemizedlist>
        <listitem><para>1:N mappings, where mapped resources are existentially dependent on a parent resources. Without the parent resource, the dependent resource cannot exist. For example, the link between a virtual machine and its disk resources.</para></listitem>
        <listitem><para>1:N mappings, where mapped resources exist independently from parent resources but data is still associated with the relationship. For example, the link between a network and a cluster.</para></listitem>
        <listitem><para>N:M mappings, where one mapped resources only belongs to one parent resource. For example, the link between a storage domain and a data center.</para></listitem>
   	  </itemizedlist>   
      <para>
        The API defines a relationship between a resource and a sub-collection using the <literal>link rel=</literal> attribute:
      </para>
      <screen>
GET /restapi-definition/collection/resource_id HTTP/1.1
Accept: application/xml

HTTP/1.1 200 OK
Content-Type: application/xml

&lt;resource id="resource_id" href="/restapi-definition/collection/resource_id"&gt;
    ...
    &lt;link rel="subcollection"
      href="/restapi-definition/collection/resource_id/subcollection"/&gt;
    ...
&lt;/{resource}&gt;
      </screen>
      <para>
        The API user now queries the sub-collection.
      </para>
      <screen>
GET /restapi-definition/collection/resource_id/subcollection HTTP/1.1
Accept: application/xml

HTTP/1.1 200 OK
Content-Type: application/xml

&lt;subcollection&gt;
    &lt;subresource id="subresource_id"
      href="/restapi-definition/collection/resource_id/subcollection/subresource_id"&gt;
        ...
    &lt;/subresource&gt;
    ...
&lt;/subcollection&gt;
      </screen>
    </section>

    <section id="sect-REST_API_Guide-Common_Features-Resources-XML_Elements">
      <title>
        XML Element Relationships
      </title>
      <para>
        XML element links act as an alternative to sub-collections to express relationships between resources. XML element links are simply elements with a "href" attribute that points to the linked element.
      </para>
      <para>
        XML element links are used to model simple 1:N mappings between resources without an existential dependency and without data associated with the relationship. For example, the relatioship between a host and a cluster.
      </para>  
      <para>
        Examples of such relationships include:
      </para>
      <itemizedlist>
        <listitem>
          <para>
            Backlinks from a resource in a sub-collection to a parent resource; or
          </para>
        </listitem>
        <listitem>
          <para>
            Links between resources with an arbitrary relationship.
          </para>
        </listitem>
      </itemizedlist>
      <example>
        <title>Backlinking from a sub-collection resource to a resource using an XML element</title>
        <screen>
GET /restapi-definition/collection/resource_id/subcollection/subresource_id HTTP/1.1

HTTP/1.1 200 OK
Content-Type: application/xml

&lt;subcollection&gt;
    &lt;subresource id="subresource_id"
      href="/restapi-definition/collection/resource_id/subcollection/subresource_id"&gt;
        &lt;resource id="resource_id" href="/restapi-definition/collection/resource_id"/&gt;
        ...
    &lt;/subresource&gt;
&lt;/subcollection&gt;
        </screen>
      </example>
    </section>
  
    <section id="sect-REST_API_Guide-Common_Features-Resources-Actions">
      <title>
        Actions
      </title>
      <para>
        Most resources include a list of action links to provide functions not achieved through the standard HTTP methods.
      </para>
      <screen>
&lt;resource&gt;
    ...
    &lt;actions&gt;
        &lt;link rel="start" href="/restapi-definition/collection/resource_id/start"/&gt;
        &lt;link rel="stop" href="/restapi-definition/collection/resource_id/stop"/&gt;
        ...
    &lt;/actions&gt;
    ...
&lt;/resource&gt;
      </screen>
      <para>
        The API invokes an action with a <literal>POST</literal> request to the supplied URI. The body of the <literal>POST</literal> requires an <literal>action</literal> representation encapsulating common and task-specific parameters. Common action parameters include:
      </para>
      <informaltable frame="none">
        <tgroup cols="2">
          <colspec colwidth="2*"/>
          <colspec colwidth="5*"/>
          <thead>
            <row>
              <entry>Element</entry>
              <entry>Description</entry>
        	  </row>
       	  </thead>
          <tbody>
            <row>
              <entry><literal>async</literal></entry>
              <entry><literal>true</literal> if the server responds immediately with <literal>202 Accepted</literal> and an action representation contains a <literal>href</literal> link to be polled for completion.</entry>
            </row>
            <row>
              <entry><literal>grace_period</literal></entry>
              <entry>a grace period in milliseconds, which must expire before the action is initiated.</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>
        Individual actions and their parameters are documented in the individual resource type's documentation. Some parameters are mandatory for specific actions and their absence is indicated with a <literal>fault</literal> response.
      </para>
      <para>
        When the action is initiated asychronously, the immediate <literal>202 Accepted</literal> response provides a link to monitor the status of the task:
      </para>
      <screen>
POST /restapi-definition/collection/resource_id/action HTTP/1.1
Content-Type: application/xml
Accept: application/xml

&lt;action&gt;
    &lt;async&gt;true&lt;/async&gt;
&lt;/action&gt;

HTTP/1.1 202 Accepted
Content-Type: application/xml

&lt;action id="action_id"
  href="/restapi-definition/collection/resource_id/action/action_id"&gt;
    &lt;async&gt;true&lt;/async&gt;
    ...
&lt;action&gt;
      </screen>
      <para>
        A subsequent <literal>GET</literal> on the action URI provides an indication of the status of the asynchronous task:
      </para>
      <informaltable frame="none">
        <tgroup cols="2">
          <colspec colwidth="2*"/>
          <colspec colwidth="5*"/>
          <thead>
            <row>
              <entry>Status</entry>
              <entry>Description</entry>
        	  </row>
       	  </thead>
          <tbody>
            <row>
              <entry><literal>PENDING</literal></entry>
              <entry>Task has not yet started</entry>
            </row>
            <row>
              <entry><literal>IN_PROGRESS</literal></entry>
              <entry>Task is in operation</entry>
            </row>
            <row>
              <entry><literal>COMPLETE</literal></entry>
              <entry>Task completed successfully</entry>
            </row>
            <row>
              <entry><literal>FAILED</literal></entry>
              <entry>Task failed. The returned <literal>action</literal> representation would contain a <literal>fault</literal> describing the failure.</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>
      Once the task has completed, the Action is retained for an indeterminate period. Once this has expired, subsequent <literal>GET</literal>s are <literal>301 Moved Permanently</literal> redirected back to the target resource.
      </para>
      <screen>
GET /restapi-definition/collection/resource_id/action/action_id HTTP/1.1
Accept: application/xml

HTTP/1.1 200 OK
Content-Type: application/xml

&lt;action id="action_id"
  href="/restapi-definition/collection/resource_id/action/action_id"&gt;
    &lt;status&gt;PENDING|IN_PROGRESS|COMPLETE|FAILED&lt;/status&gt;
    &lt;link rel="parent" /restapi-definition/collection/resource_id"/&gt;
    &lt;link rel="replay" href="/restapi-definition/collection/resource_id/action"/&gt;
&lt;action&gt;
      </screen>
      <para>
        An action representation also includes some links that are identified by the <literal>rel</literal> attribute:
      </para>
      <informaltable frame="none">
        <tgroup cols="2">
          <colspec colwidth="2*"/>
          <colspec colwidth="5*"/>
          <tbody>
            <row>
              <entry><literal>parent</literal></entry>
              <entry>A link back to the resource of this action</entry>
            </row>
            <row>
              <entry><literal>replay</literal></entry>
              <entry>A link back to the original action URI. POSTing to this URI causes the action to be re-initiated</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </section>

    <section id="sect-REST_API_Guide-Common_Features-Resources-Permissions">
      <title>
        Permissions
      </title>
      <para>
        Each resource contains a <literal>permissions</literal> sub-collection. Each <literal>permission</literal> contains a <literal>user</literal>, an assigned <literal>role</literal> and the specified resource. For example:
      </para>
      <screen>
GET /restapi-definition/collection/resource_id/permissions HTTP/1.1
Accept: application/xml

HTTP/1.1 200 OK
Content-Type: application/xml

&lt;permissions&gt;
    &lt;permission id="permission-id"
      href="/restapi-definition/collection/resource_id/permissions/permission_id"&gt;
        &lt;role id="role_id" href="/restapi-definition/roles/role_id"/&gt;
        &lt;user id="user_id" href="/restapi-definition/users/user_id"/&gt;
        &lt;resource id="resource_id" href="/restapi-definition/collection/resource_id"/&gt;
    &lt;/permission&gt;
    ...
&lt;/permissions&gt;
      </screen>
      <para>
        A resource acquires a new permission when an API user sends a <literal>POST</literal> request with a <literal>permission</literal> representation to the resource's <literal>permissions</literal> sub-collection. Each new permission requires a <literal>role</literal> and a <literal>user</literal>:
      </para>
      <screen>
POST /restapi-definition/collection/resource_id/permissions HTTP/1.1
Accept: application/xml

&lt;permission"&gt;
    &lt;role id="role_id"/&gt;
    &lt;user id="user_id"/&gt;
&lt;/permission&gt;

HTTP/1.1 201 Created
Content-Type: application/xml

&lt;permission id="permission_id"
  href="/restapi-definition/resources/resource_id/permissions/permission_id"&gt;
    &lt;role id="role_id" href="/restapi-definition/roles/role_id"/&gt;
    &lt;user id="user_id" href="/restapi-definition/users/user_id"/&gt;
    &lt;resource id="resource_id" href="/restapi-definition/collection/resource_id"/&gt;
&lt;/permission&gt;
      </screen>
    </section>

    <section id="sect-REST_API_Guide-Common_Features-Resources-Handling_Errors">
      <title>
        Handling Errors
      </title>
      <para>
        Some errors require further explanation beyond a standard HTTP status code. For example, the API reports an unsuccessful resource state update or action with a <literal>fault</literal> representation in the response entity body. The fault contains a reason and detail strings, which the API localizesas per the <literal>Accept-Language</literal> HTTP header. Clients initiating a failed request in this way are to unmarshal either a <literal>fault</literal> <emphasis>or</emphasis> the expected resource representation, depending on the response status code. Such cases are clearly indicated in the individual resource documentation.
      </para>
      <screen>
PUT /restapi-definition/collection/resource_id HTTP/1.1
Accept: application/xml
Content-Type: application/xml

&lt;resource&gt;
    &lt;id&gt;id-update-test&lt;/id&gt;
&lt;/resource&gt;

HTTP/1.1 409 Conflict
Content-Type: application/xml

&lt;fault&gt;
    &lt;reason&gt;Broken immutability constraint&lt;/reason&gt;
    &lt;detail&gt;Attempt to set immutable field: id&lt;/detail&gt;
&lt;/fault&gt;
      </screen>
    </section>
  </section>
</chapter>
